print ("Calculate small world distance matrix")
minmax.scale<-function(v){
    max<-max(v)
    min<-min(v)
    print(max)
    print (min) 
    normalizeit<-function(x){
	return ((x-min)/(max-min))
    }
    
    return (sapply(v,normalizeit))
}
calculate.pairwiseDistance<-function(v){
    n<-length(v)
    m<-matrix(numeric(0),n,n)
    for(i in 1:n){
	for(j in 1:n){
	m[i,j]<-abs(v[i]-v[j])#manhattan distance
	} 
    }#i loop
    return(m)

}


igraph_db<-lapply(graph_db,asIgraph)
#average path length
apl_list<-lapply(igraph_db,function(x){return (average.path.length(graph=x,directed=F,unconnected=F))})
apl<-c(do.call("cbind",apl_list))
normalized_apl<-minmax.scale(apl)
normalized_apl_distance<-calculate.pairwiseDistance(normalized_apl)
#clustering coefficent
cc_list<-lapply(igraph_db,function(x){return(transitivity(x,type="localaverageundirected",isolates="zero"))})
cc<-c(do.call("cbind",cc_list))
normalized_cc<-minmax.scale(cc)
normalized_cc_distance<-calculate.pairwiseDistance(normalized_cc)

sw.dist.matrix<-as.dist((normalized_apl_distance+normalized_cc_distance)/2)
sw.agn<-agnes(sw.dist.matrix,method="ward")


